from __future__ import absolute_import

from imagekitio.transform import Transform
from imagekitio import utils
import time
from hashlib import sha1
import hmac
from imagekit.utils import (PY3, to_bytes)


class Image(object):
    def __init__(self, key=None, options=None, globl=None):
        self.key = key
        self.raw = options
        _tmp = {}
        for i in options:
            if PY3:
                _tmp = dict(_tmp, **i)
            else:
                _tmp = dict(_tmp.items() + i.items())
        self.option = _tmp

        if PY3:
            self.options = dict(get_defaults(), **globl)
            self.options = dict(self.options, **self.option)
        else:
            self.options = dict(get_defaults().items() + globl.items() + self.option.items())

    ''' Get a URL for the image with different transformations and patterns '''
    def url(self):
        # print("url")
        transformation_string = self._get_transform_string()
        # print(transformation_string)

        if self.options.pop('use_subdomain', None):
            _pathname = "/".join([self.options["pattern"], 'tr:' + transformation_string, self.key])
        else:
            _pathname = "/".join([self.options["imagekit_id"], self.options["pattern"], 'tr:' + transformation_string, self.key])

        msg = {'host': utils.get_host(self.options["imagekit_id"], self.options.pop('use_subdomain', None)),
                    'protocol': utils.get_protocol(self.options["use_secure"]),
                    'pathname': _pathname}
        # print(msg)
        return msg

    ''' Get signed URL for the image with different transformations and patterns '''
    def signed_url(self, expiry_seconds=None):
        # print("signed_url")
        transformation_string = self._get_transform_string()
        # print(transformation_string)

        expiry_timestamp = int(time.time()) + expiry_seconds if expiry_seconds else utils.get_inifinite_expiry()
        # print(expiry_seconds, expiry_timestamp)

        q = {
            "s": get_digest(transformation_string, expiry_timestamp, self.key, **self.options)
        }

        if expiry_seconds:
            q["t"] = expiry_timestamp

        if self.options.pop('use_subdomain', None):
            _pathname = "/".join([self.options["pattern"], 'tr:' + transformation_string, self.key])
        else:
            _pathname = "/".join([self.options["imagekit_id"], self.options["pattern"], 'tr:' + transformation_string, self.key])

        msg = {'host': utils.get_host(self.options["imagekit_id"], self.options.pop('use_subdomain', None)),
                   'protocol': utils.get_protocol(self.options["use_secure"]),
                   'pathname': _pathname,
                   'query': q}
        # print(msg)
        return msg

    def _get_transform_string(self):
        tr = Transform(self.raw)
        _parsed_transforms = tr.valid_transforms()

        return _parsed_transforms


def get_defaults():
    return {"pattern": "img"}


def get_digest(transformation_string, expiry_timestamp, key, **options):
    _str = options["imagekit_id"] + transformation_string + str(expiry_timestamp) + key
    # print(_str)
    hashed = hmac.new(to_bytes(options["api_secret"]), to_bytes(_str), sha1)
    hex_dig = hashed.hexdigest()
    return hex_dig
