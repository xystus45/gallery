from __future__ import absolute_import

from imagekitio import utils
import time
import requests
from imagekit.utils import (PY3, to_bytes, to_bytearray, to_string, string_types, unquote, urlencode, Error,
                             HTTPError, urllib2)


class Upload(object):
    def __init__(self, image=None, options=None, globl=None):
        self.image = image
        self.files = {'image': ''}
        self.option = options

        if PY3:
            self.options = dict(get_defaults(), **globl)
            self.options = dict(self.options, **self.option)
        else:
            self.options = dict(get_defaults().items() + globl.items() + self.option.items())

        self.options["timestamp"] = int(time.time())

        if not verify(self.options) or not self.image:
            raise Error("Invalid or missing upload parameters - %d - %s" % (2400, "BAD_REQUEST"))

        self.signature = utils.calculate_signature(self.options)

    def uploader(self):

        url = utils.get_protocol(False) + '//' + utils.get_image_upload_url(self.options["imagekit_id"])

        form_data = {
            'image': self.image,
            'filename': self.options['filename'],
            'useUniqueFilename': self.options['useUniqueFilename'],
            'folder': self.options["folder"],
            'timestamp': self.options["timestamp"],
            'apiKey': self.options["api_key"],
            'signature': self.signature
        }

        # session = requests.Session()
        r = requests.post(url, data=form_data, files=self.files)
        return r


def get_defaults():
    return {"useUniqueFilename": True,
            "folder": "/"}


def verify(globl):
    if globl['imagekit_id'] and globl['api_key'] and globl['api_secret'] and globl['filename'] and globl['timestamp']:
        return True
    else:
        return False
